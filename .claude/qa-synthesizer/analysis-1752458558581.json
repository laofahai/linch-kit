{
  "filePath": "packages/core/src/config/manager.ts",
  "complexity": 124,
  "functions": [
    {
      "name": "handler",
      "params": [
        "event: { key: string; newValue: ConfigValue }"
      ],
      "isAsync": false,
      "isPublic": false,
      "complexity": 4
    },
    {
      "name": "unwatch",
      "params": [],
      "isAsync": false,
      "isPublic": false,
      "complexity": 1
    },
    {
      "name": "constructor",
      "params": [],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "super",
      "params": [],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "loadConfig",
      "params": [
        "source: ConfigSource"
      ],
      "isAsync": true,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "set",
      "params": [
        "source.id",
        "source"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "loadFromSource",
      "params": [
        "source"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "mergeConfig",
      "params": [
        "config",
        "source.priority || 0"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "emit",
      "params": [
        "'config:loaded'",
        "{ sourceId: source.id",
        "config }"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 3
    },
    {
      "name": "catch",
      "params": [
        "error"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "emit",
      "params": [
        "'config:error'",
        "{\n        sourceId: source.id",
        "error: error instanceof Error ? error.message : 'Unknown error'",
        "}"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 6
    },
    {
      "name": "get",
      "params": [
        "key"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "set",
      "params": [
        "key: string",
        "value: ConfigValue"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 3
    },
    {
      "name": "get",
      "params": [
        "key"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "set",
      "params": [
        "key",
        "value"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "if",
      "params": [
        "oldValue !== value"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "emit",
      "params": [
        "'config:changed'",
        "{ key",
        "oldValue",
        "newValue: value }"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 3
    },
    {
      "name": "has",
      "params": [
        "key: string"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "has",
      "params": [
        "key"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "delete",
      "params": [
        "key: string"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "has",
      "params": [
        "key"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "if",
      "params": [
        "existed"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "get",
      "params": [
        "key"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "delete",
      "params": [
        "key"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "emit",
      "params": [
        "'config:deleted'",
        "{ key",
        "oldValue }"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "getAll",
      "params": [],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "fromEntries",
      "params": [
        "this.configs"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "watch",
      "params": [
        "key: string",
        "callback: (value: ConfigValue"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 4
    },
    {
      "name": "if",
      "params": [
        "event.key === key || (options?.deep && key.startsWith(event.key + '.'"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 5
    },
    {
      "name": "callback",
      "params": [
        "event.newValue"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "on",
      "params": [
        "'config:changed'",
        "handler"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "off",
      "params": [
        "'config:changed'",
        "handler"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "if",
      "params": [
        "options?.watchId"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 3
    },
    {
      "name": "set",
      "params": [
        "options.watchId",
        "unwatch"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "unwatch",
      "params": [
        "watchId: string"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "get",
      "params": [
        "watchId"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "if",
      "params": [
        "unwatch"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "unwatch",
      "params": [],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "delete",
      "params": [
        "watchId"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "reload",
      "params": [
        "sourceId?: string"
      ],
      "isAsync": true,
      "isPublic": true,
      "complexity": 3
    },
    {
      "name": "if",
      "params": [
        "sourceId"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "get",
      "params": [
        "sourceId"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "if",
      "params": [
        "source"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "loadConfig",
      "params": [
        "source"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "for",
      "params": [
        "const source of this.sources.values("
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "loadConfig",
      "params": [
        "source"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "clear",
      "params": [],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "clear",
      "params": [],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "clear",
      "params": [],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "for",
      "params": [
        "const unwatch of this.watchers.values("
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "unwatch",
      "params": [],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "clear",
      "params": [],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "emit",
      "params": [
        "'config:cleared'"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "loadFromSource",
      "params": [
        "source: ConfigSource"
      ],
      "isAsync": true,
      "isPublic": false,
      "complexity": 2
    },
    {
      "name": "switch",
      "params": [
        "source.type"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "loadFromFile",
      "params": [
        "source.path!"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "loadFromEnv",
      "params": [
        "source.prefix"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "loadFromRemote",
      "params": [
        "source.url!"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "Error",
      "params": [
        "`Unsupported config source type: ${source.type}`"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "loadFromFile",
      "params": [
        "filePath: string"
      ],
      "isAsync": true,
      "isPublic": false,
      "complexity": 2
    },
    {
      "name": "import",
      "params": [
        "'fs/promises'"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "if",
      "params": [
        "filePath.endsWith('.json'"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "readFile",
      "params": [
        "filePath",
        "'utf-8'"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "parse",
      "params": [
        "content"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "if",
      "params": [
        "filePath.endsWith('.yaml'"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "endsWith",
      "params": [
        "'.yml'"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "import",
      "params": [
        "'yaml'"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "readFile",
      "params": [
        "filePath",
        "'utf-8'"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "parse",
      "params": [
        "content"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "if",
      "params": [
        "filePath.endsWith('.js'"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "endsWith",
      "params": [
        "'.mjs'"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "if",
      "params": [
        "typeof require !== 'undefined'"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "require",
      "params": [
        "filePath"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "Error",
      "params": [
        "'Loading JavaScript config files is not supported in browser environment'"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "Error",
      "params": [
        "`Unsupported file format: ${filePath}`"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "catch",
      "params": [
        "error"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "Error",
      "params": [
        "`Failed to load config from ${filePath}: ${error instanceof Error ? error.message : 'Unknown error'}`"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 4
    },
    {
      "name": "loadFromEnv",
      "params": [
        "prefix = ''"
      ],
      "isAsync": false,
      "isPublic": false,
      "complexity": 1
    },
    {
      "name": "for",
      "params": [
        "const [key",
        "value] of Object.entries(process.env"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "if",
      "params": [
        "!prefix || key.startsWith(prefix"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 3
    },
    {
      "name": "slice",
      "params": [
        "prefix.length"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "toLowerCase",
      "params": [],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "parseEnvValue",
      "params": [
        "value!"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "loadFromRemote",
      "params": [
        "url: string"
      ],
      "isAsync": true,
      "isPublic": false,
      "complexity": 2
    },
    {
      "name": "fetch",
      "params": [
        "url"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "if",
      "params": [
        "!response.ok"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "Error",
      "params": [
        "`HTTP ${response.status}: ${response.statusText}`"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "get",
      "params": [
        "'content-type'"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "if",
      "params": [
        "contentType.includes('application/json'"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "json",
      "params": [],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "if",
      "params": [
        "contentType.includes('application/yaml'"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "includes",
      "params": [
        "'text/yaml'"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "import",
      "params": [
        "'yaml'"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "text",
      "params": [],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "parse",
      "params": [
        "text"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "Error",
      "params": [
        "`Unsupported remote content type: ${contentType}`"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "catch",
      "params": [
        "error"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "Error",
      "params": [
        "`Failed to load remote config from ${url}: ${error instanceof Error ? error.message : 'Unknown error'}`"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 4
    },
    {
      "name": "parseEnvValue",
      "params": [
        "value: string"
      ],
      "isAsync": false,
      "isPublic": false,
      "complexity": 2
    },
    {
      "name": "if",
      "params": [
        "/^\\d+$/.test(value"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "parseInt",
      "params": [
        "value",
        "10"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "if",
      "params": [
        "/^\\d+\\.\\d+$/.test(value"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "parseFloat",
      "params": [
        "value"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "if",
      "params": [
        "value.toLowerCase("
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "if",
      "params": [
        "value.toLowerCase("
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "if",
      "params": [
        "(value.startsWith('{'"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "endsWith",
      "params": [
        "'}'"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "startsWith",
      "params": [
        "'['"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "endsWith",
      "params": [
        "']'"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "parse",
      "params": [
        "value"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "mergeConfig",
      "params": [
        "config: Record<string",
        "ConfigValue>",
        "priority: number"
      ],
      "isAsync": false,
      "isPublic": false,
      "complexity": 3
    },
    {
      "name": "for",
      "params": [
        "const [key",
        "value] of Object.entries(config"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "if",
      "params": [
        "!this.configs.has(key"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 2
    },
    {
      "name": "set",
      "params": [
        "key",
        "value"
      ],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    },
    {
      "name": "ConfigManager",
      "params": [],
      "isAsync": false,
      "isPublic": true,
      "complexity": 1
    }
  ],
  "classes": [
    {
      "name": "ConfigManager",
      "methods": [
        {
          "name": "constructor",
          "params": [],
          "isAsync": false,
          "isPublic": true,
          "complexity": 1
        },
        {
          "name": "super",
          "params": [],
          "isAsync": false,
          "isPublic": true,
          "complexity": 1
        }
      ],
      "properties": [],
      "extends": "EventEmitter",
      "implements": [
        "IConfigManager"
      ]
    }
  ],
  "edgeCases": [
    {
      "type": "null",
      "description": "handler 应处理 null 参数",
      "testCase": "expect(() => handler(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "handler 应处理 undefined 参数",
      "testCase": "expect(() => handler(undefined)).toThrow()"
    },
    {
      "type": "empty",
      "description": "handler 应处理空字符串",
      "testCase": "expect(handler('')).toBeDefined()"
    },
    {
      "type": "null",
      "description": "loadConfig 应处理 null 参数",
      "testCase": "expect(() => loadConfig(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "loadConfig 应处理 undefined 参数",
      "testCase": "expect(() => loadConfig(undefined)).toThrow()"
    },
    {
      "type": "async-error",
      "description": "loadConfig 异步错误处理",
      "testCase": "await expect(loadConfig()).rejects.toThrow()"
    },
    {
      "type": "null",
      "description": "set 应处理 null 参数",
      "testCase": "expect(() => set(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "set 应处理 undefined 参数",
      "testCase": "expect(() => set(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "loadFromSource 应处理 null 参数",
      "testCase": "expect(() => loadFromSource(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "loadFromSource 应处理 undefined 参数",
      "testCase": "expect(() => loadFromSource(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "mergeConfig 应处理 null 参数",
      "testCase": "expect(() => mergeConfig(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "mergeConfig 应处理 undefined 参数",
      "testCase": "expect(() => mergeConfig(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "emit 应处理 null 参数",
      "testCase": "expect(() => emit(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "emit 应处理 undefined 参数",
      "testCase": "expect(() => emit(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "catch 应处理 null 参数",
      "testCase": "expect(() => catch(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "catch 应处理 undefined 参数",
      "testCase": "expect(() => catch(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "emit 应处理 null 参数",
      "testCase": "expect(() => emit(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "emit 应处理 undefined 参数",
      "testCase": "expect(() => emit(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "get 应处理 null 参数",
      "testCase": "expect(() => get(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "get 应处理 undefined 参数",
      "testCase": "expect(() => get(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "set 应处理 null 参数",
      "testCase": "expect(() => set(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "set 应处理 undefined 参数",
      "testCase": "expect(() => set(undefined)).toThrow()"
    },
    {
      "type": "empty",
      "description": "set 应处理空字符串",
      "testCase": "expect(set('')).toBeDefined()"
    },
    {
      "type": "null",
      "description": "get 应处理 null 参数",
      "testCase": "expect(() => get(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "get 应处理 undefined 参数",
      "testCase": "expect(() => get(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "set 应处理 null 参数",
      "testCase": "expect(() => set(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "set 应处理 undefined 参数",
      "testCase": "expect(() => set(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "if 应处理 null 参数",
      "testCase": "expect(() => if(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "if 应处理 undefined 参数",
      "testCase": "expect(() => if(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "emit 应处理 null 参数",
      "testCase": "expect(() => emit(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "emit 应处理 undefined 参数",
      "testCase": "expect(() => emit(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "has 应处理 null 参数",
      "testCase": "expect(() => has(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "has 应处理 undefined 参数",
      "testCase": "expect(() => has(undefined)).toThrow()"
    },
    {
      "type": "empty",
      "description": "has 应处理空字符串",
      "testCase": "expect(has('')).toBeDefined()"
    },
    {
      "type": "null",
      "description": "has 应处理 null 参数",
      "testCase": "expect(() => has(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "has 应处理 undefined 参数",
      "testCase": "expect(() => has(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "delete 应处理 null 参数",
      "testCase": "expect(() => delete(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "delete 应处理 undefined 参数",
      "testCase": "expect(() => delete(undefined)).toThrow()"
    },
    {
      "type": "empty",
      "description": "delete 应处理空字符串",
      "testCase": "expect(delete('')).toBeDefined()"
    },
    {
      "type": "null",
      "description": "has 应处理 null 参数",
      "testCase": "expect(() => has(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "has 应处理 undefined 参数",
      "testCase": "expect(() => has(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "if 应处理 null 参数",
      "testCase": "expect(() => if(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "if 应处理 undefined 参数",
      "testCase": "expect(() => if(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "get 应处理 null 参数",
      "testCase": "expect(() => get(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "get 应处理 undefined 参数",
      "testCase": "expect(() => get(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "delete 应处理 null 参数",
      "testCase": "expect(() => delete(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "delete 应处理 undefined 参数",
      "testCase": "expect(() => delete(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "emit 应处理 null 参数",
      "testCase": "expect(() => emit(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "emit 应处理 undefined 参数",
      "testCase": "expect(() => emit(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "fromEntries 应处理 null 参数",
      "testCase": "expect(() => fromEntries(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "fromEntries 应处理 undefined 参数",
      "testCase": "expect(() => fromEntries(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "watch 应处理 null 参数",
      "testCase": "expect(() => watch(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "watch 应处理 undefined 参数",
      "testCase": "expect(() => watch(undefined)).toThrow()"
    },
    {
      "type": "empty",
      "description": "watch 应处理空字符串",
      "testCase": "expect(watch('')).toBeDefined()"
    },
    {
      "type": "null",
      "description": "if 应处理 null 参数",
      "testCase": "expect(() => if(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "if 应处理 undefined 参数",
      "testCase": "expect(() => if(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "callback 应处理 null 参数",
      "testCase": "expect(() => callback(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "callback 应处理 undefined 参数",
      "testCase": "expect(() => callback(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "on 应处理 null 参数",
      "testCase": "expect(() => on(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "on 应处理 undefined 参数",
      "testCase": "expect(() => on(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "off 应处理 null 参数",
      "testCase": "expect(() => off(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "off 应处理 undefined 参数",
      "testCase": "expect(() => off(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "if 应处理 null 参数",
      "testCase": "expect(() => if(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "if 应处理 undefined 参数",
      "testCase": "expect(() => if(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "set 应处理 null 参数",
      "testCase": "expect(() => set(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "set 应处理 undefined 参数",
      "testCase": "expect(() => set(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "unwatch 应处理 null 参数",
      "testCase": "expect(() => unwatch(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "unwatch 应处理 undefined 参数",
      "testCase": "expect(() => unwatch(undefined)).toThrow()"
    },
    {
      "type": "empty",
      "description": "unwatch 应处理空字符串",
      "testCase": "expect(unwatch('')).toBeDefined()"
    },
    {
      "type": "null",
      "description": "get 应处理 null 参数",
      "testCase": "expect(() => get(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "get 应处理 undefined 参数",
      "testCase": "expect(() => get(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "if 应处理 null 参数",
      "testCase": "expect(() => if(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "if 应处理 undefined 参数",
      "testCase": "expect(() => if(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "delete 应处理 null 参数",
      "testCase": "expect(() => delete(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "delete 应处理 undefined 参数",
      "testCase": "expect(() => delete(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "reload 应处理 null 参数",
      "testCase": "expect(() => reload(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "reload 应处理 undefined 参数",
      "testCase": "expect(() => reload(undefined)).toThrow()"
    },
    {
      "type": "empty",
      "description": "reload 应处理空字符串",
      "testCase": "expect(reload('')).toBeDefined()"
    },
    {
      "type": "async-error",
      "description": "reload 异步错误处理",
      "testCase": "await expect(reload()).rejects.toThrow()"
    },
    {
      "type": "null",
      "description": "if 应处理 null 参数",
      "testCase": "expect(() => if(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "if 应处理 undefined 参数",
      "testCase": "expect(() => if(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "get 应处理 null 参数",
      "testCase": "expect(() => get(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "get 应处理 undefined 参数",
      "testCase": "expect(() => get(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "if 应处理 null 参数",
      "testCase": "expect(() => if(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "if 应处理 undefined 参数",
      "testCase": "expect(() => if(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "loadConfig 应处理 null 参数",
      "testCase": "expect(() => loadConfig(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "loadConfig 应处理 undefined 参数",
      "testCase": "expect(() => loadConfig(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "for 应处理 null 参数",
      "testCase": "expect(() => for(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "for 应处理 undefined 参数",
      "testCase": "expect(() => for(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "loadConfig 应处理 null 参数",
      "testCase": "expect(() => loadConfig(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "loadConfig 应处理 undefined 参数",
      "testCase": "expect(() => loadConfig(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "for 应处理 null 参数",
      "testCase": "expect(() => for(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "for 应处理 undefined 参数",
      "testCase": "expect(() => for(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "emit 应处理 null 参数",
      "testCase": "expect(() => emit(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "emit 应处理 undefined 参数",
      "testCase": "expect(() => emit(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "loadFromSource 应处理 null 参数",
      "testCase": "expect(() => loadFromSource(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "loadFromSource 应处理 undefined 参数",
      "testCase": "expect(() => loadFromSource(undefined)).toThrow()"
    },
    {
      "type": "async-error",
      "description": "loadFromSource 异步错误处理",
      "testCase": "await expect(loadFromSource()).rejects.toThrow()"
    },
    {
      "type": "null",
      "description": "switch 应处理 null 参数",
      "testCase": "expect(() => switch(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "switch 应处理 undefined 参数",
      "testCase": "expect(() => switch(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "loadFromFile 应处理 null 参数",
      "testCase": "expect(() => loadFromFile(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "loadFromFile 应处理 undefined 参数",
      "testCase": "expect(() => loadFromFile(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "loadFromEnv 应处理 null 参数",
      "testCase": "expect(() => loadFromEnv(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "loadFromEnv 应处理 undefined 参数",
      "testCase": "expect(() => loadFromEnv(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "loadFromRemote 应处理 null 参数",
      "testCase": "expect(() => loadFromRemote(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "loadFromRemote 应处理 undefined 参数",
      "testCase": "expect(() => loadFromRemote(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "Error 应处理 null 参数",
      "testCase": "expect(() => Error(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "Error 应处理 undefined 参数",
      "testCase": "expect(() => Error(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "loadFromFile 应处理 null 参数",
      "testCase": "expect(() => loadFromFile(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "loadFromFile 应处理 undefined 参数",
      "testCase": "expect(() => loadFromFile(undefined)).toThrow()"
    },
    {
      "type": "empty",
      "description": "loadFromFile 应处理空字符串",
      "testCase": "expect(loadFromFile('')).toBeDefined()"
    },
    {
      "type": "async-error",
      "description": "loadFromFile 异步错误处理",
      "testCase": "await expect(loadFromFile()).rejects.toThrow()"
    },
    {
      "type": "null",
      "description": "import 应处理 null 参数",
      "testCase": "expect(() => import(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "import 应处理 undefined 参数",
      "testCase": "expect(() => import(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "if 应处理 null 参数",
      "testCase": "expect(() => if(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "if 应处理 undefined 参数",
      "testCase": "expect(() => if(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "readFile 应处理 null 参数",
      "testCase": "expect(() => readFile(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "readFile 应处理 undefined 参数",
      "testCase": "expect(() => readFile(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "parse 应处理 null 参数",
      "testCase": "expect(() => parse(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "parse 应处理 undefined 参数",
      "testCase": "expect(() => parse(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "if 应处理 null 参数",
      "testCase": "expect(() => if(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "if 应处理 undefined 参数",
      "testCase": "expect(() => if(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "endsWith 应处理 null 参数",
      "testCase": "expect(() => endsWith(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "endsWith 应处理 undefined 参数",
      "testCase": "expect(() => endsWith(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "import 应处理 null 参数",
      "testCase": "expect(() => import(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "import 应处理 undefined 参数",
      "testCase": "expect(() => import(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "readFile 应处理 null 参数",
      "testCase": "expect(() => readFile(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "readFile 应处理 undefined 参数",
      "testCase": "expect(() => readFile(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "parse 应处理 null 参数",
      "testCase": "expect(() => parse(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "parse 应处理 undefined 参数",
      "testCase": "expect(() => parse(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "if 应处理 null 参数",
      "testCase": "expect(() => if(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "if 应处理 undefined 参数",
      "testCase": "expect(() => if(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "endsWith 应处理 null 参数",
      "testCase": "expect(() => endsWith(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "endsWith 应处理 undefined 参数",
      "testCase": "expect(() => endsWith(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "if 应处理 null 参数",
      "testCase": "expect(() => if(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "if 应处理 undefined 参数",
      "testCase": "expect(() => if(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "require 应处理 null 参数",
      "testCase": "expect(() => require(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "require 应处理 undefined 参数",
      "testCase": "expect(() => require(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "Error 应处理 null 参数",
      "testCase": "expect(() => Error(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "Error 应处理 undefined 参数",
      "testCase": "expect(() => Error(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "Error 应处理 null 参数",
      "testCase": "expect(() => Error(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "Error 应处理 undefined 参数",
      "testCase": "expect(() => Error(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "catch 应处理 null 参数",
      "testCase": "expect(() => catch(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "catch 应处理 undefined 参数",
      "testCase": "expect(() => catch(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "Error 应处理 null 参数",
      "testCase": "expect(() => Error(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "Error 应处理 undefined 参数",
      "testCase": "expect(() => Error(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "loadFromEnv 应处理 null 参数",
      "testCase": "expect(() => loadFromEnv(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "loadFromEnv 应处理 undefined 参数",
      "testCase": "expect(() => loadFromEnv(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "for 应处理 null 参数",
      "testCase": "expect(() => for(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "for 应处理 undefined 参数",
      "testCase": "expect(() => for(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "if 应处理 null 参数",
      "testCase": "expect(() => if(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "if 应处理 undefined 参数",
      "testCase": "expect(() => if(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "slice 应处理 null 参数",
      "testCase": "expect(() => slice(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "slice 应处理 undefined 参数",
      "testCase": "expect(() => slice(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "parseEnvValue 应处理 null 参数",
      "testCase": "expect(() => parseEnvValue(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "parseEnvValue 应处理 undefined 参数",
      "testCase": "expect(() => parseEnvValue(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "loadFromRemote 应处理 null 参数",
      "testCase": "expect(() => loadFromRemote(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "loadFromRemote 应处理 undefined 参数",
      "testCase": "expect(() => loadFromRemote(undefined)).toThrow()"
    },
    {
      "type": "empty",
      "description": "loadFromRemote 应处理空字符串",
      "testCase": "expect(loadFromRemote('')).toBeDefined()"
    },
    {
      "type": "async-error",
      "description": "loadFromRemote 异步错误处理",
      "testCase": "await expect(loadFromRemote()).rejects.toThrow()"
    },
    {
      "type": "null",
      "description": "fetch 应处理 null 参数",
      "testCase": "expect(() => fetch(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "fetch 应处理 undefined 参数",
      "testCase": "expect(() => fetch(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "if 应处理 null 参数",
      "testCase": "expect(() => if(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "if 应处理 undefined 参数",
      "testCase": "expect(() => if(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "Error 应处理 null 参数",
      "testCase": "expect(() => Error(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "Error 应处理 undefined 参数",
      "testCase": "expect(() => Error(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "get 应处理 null 参数",
      "testCase": "expect(() => get(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "get 应处理 undefined 参数",
      "testCase": "expect(() => get(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "if 应处理 null 参数",
      "testCase": "expect(() => if(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "if 应处理 undefined 参数",
      "testCase": "expect(() => if(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "if 应处理 null 参数",
      "testCase": "expect(() => if(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "if 应处理 undefined 参数",
      "testCase": "expect(() => if(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "includes 应处理 null 参数",
      "testCase": "expect(() => includes(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "includes 应处理 undefined 参数",
      "testCase": "expect(() => includes(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "import 应处理 null 参数",
      "testCase": "expect(() => import(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "import 应处理 undefined 参数",
      "testCase": "expect(() => import(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "parse 应处理 null 参数",
      "testCase": "expect(() => parse(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "parse 应处理 undefined 参数",
      "testCase": "expect(() => parse(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "Error 应处理 null 参数",
      "testCase": "expect(() => Error(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "Error 应处理 undefined 参数",
      "testCase": "expect(() => Error(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "catch 应处理 null 参数",
      "testCase": "expect(() => catch(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "catch 应处理 undefined 参数",
      "testCase": "expect(() => catch(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "Error 应处理 null 参数",
      "testCase": "expect(() => Error(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "Error 应处理 undefined 参数",
      "testCase": "expect(() => Error(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "parseEnvValue 应处理 null 参数",
      "testCase": "expect(() => parseEnvValue(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "parseEnvValue 应处理 undefined 参数",
      "testCase": "expect(() => parseEnvValue(undefined)).toThrow()"
    },
    {
      "type": "empty",
      "description": "parseEnvValue 应处理空字符串",
      "testCase": "expect(parseEnvValue('')).toBeDefined()"
    },
    {
      "type": "null",
      "description": "if 应处理 null 参数",
      "testCase": "expect(() => if(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "if 应处理 undefined 参数",
      "testCase": "expect(() => if(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "parseInt 应处理 null 参数",
      "testCase": "expect(() => parseInt(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "parseInt 应处理 undefined 参数",
      "testCase": "expect(() => parseInt(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "if 应处理 null 参数",
      "testCase": "expect(() => if(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "if 应处理 undefined 参数",
      "testCase": "expect(() => if(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "parseFloat 应处理 null 参数",
      "testCase": "expect(() => parseFloat(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "parseFloat 应处理 undefined 参数",
      "testCase": "expect(() => parseFloat(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "if 应处理 null 参数",
      "testCase": "expect(() => if(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "if 应处理 undefined 参数",
      "testCase": "expect(() => if(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "if 应处理 null 参数",
      "testCase": "expect(() => if(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "if 应处理 undefined 参数",
      "testCase": "expect(() => if(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "if 应处理 null 参数",
      "testCase": "expect(() => if(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "if 应处理 undefined 参数",
      "testCase": "expect(() => if(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "endsWith 应处理 null 参数",
      "testCase": "expect(() => endsWith(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "endsWith 应处理 undefined 参数",
      "testCase": "expect(() => endsWith(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "startsWith 应处理 null 参数",
      "testCase": "expect(() => startsWith(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "startsWith 应处理 undefined 参数",
      "testCase": "expect(() => startsWith(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "endsWith 应处理 null 参数",
      "testCase": "expect(() => endsWith(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "endsWith 应处理 undefined 参数",
      "testCase": "expect(() => endsWith(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "parse 应处理 null 参数",
      "testCase": "expect(() => parse(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "parse 应处理 undefined 参数",
      "testCase": "expect(() => parse(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "mergeConfig 应处理 null 参数",
      "testCase": "expect(() => mergeConfig(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "mergeConfig 应处理 undefined 参数",
      "testCase": "expect(() => mergeConfig(undefined)).toThrow()"
    },
    {
      "type": "empty",
      "description": "mergeConfig 应处理空字符串",
      "testCase": "expect(mergeConfig('')).toBeDefined()"
    },
    {
      "type": "null",
      "description": "for 应处理 null 参数",
      "testCase": "expect(() => for(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "for 应处理 undefined 参数",
      "testCase": "expect(() => for(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "if 应处理 null 参数",
      "testCase": "expect(() => if(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "if 应处理 undefined 参数",
      "testCase": "expect(() => if(undefined)).toThrow()"
    },
    {
      "type": "null",
      "description": "set 应处理 null 参数",
      "testCase": "expect(() => set(null)).toThrow()"
    },
    {
      "type": "undefined",
      "description": "set 应处理 undefined 参数",
      "testCase": "expect(() => set(undefined)).toThrow()"
    }
  ],
  "testStrategy": {
    "unitTestCoverage": 90,
    "integrationTests": [
      "delete 数据库集成测试",
      "delete 数据库集成测试",
      "delete 数据库集成测试"
    ],
    "performanceTests": [
      "emit 性能基准测试"
    ],
    "securityTests": [],
    "priorityTests": [
      "constructor 公共API测试",
      "super 公共API测试",
      "loadConfig 公共API测试",
      "set 公共API测试",
      "loadFromSource 公共API测试",
      "mergeConfig 公共API测试",
      "emit 公共API测试",
      "catch 公共API测试",
      "emit 公共API测试",
      "get 公共API测试",
      "set 公共API测试",
      "get 公共API测试",
      "set 公共API测试",
      "if 公共API测试",
      "emit 公共API测试",
      "has 公共API测试",
      "has 公共API测试",
      "delete 公共API测试",
      "has 公共API测试",
      "if 公共API测试",
      "get 公共API测试",
      "delete 公共API测试",
      "emit 公共API测试",
      "getAll 公共API测试",
      "fromEntries 公共API测试",
      "watch 公共API测试",
      "if 公共API测试",
      "callback 公共API测试",
      "on 公共API测试",
      "off 公共API测试",
      "if 公共API测试",
      "set 公共API测试",
      "unwatch 公共API测试",
      "get 公共API测试",
      "if 公共API测试",
      "unwatch 公共API测试",
      "delete 公共API测试",
      "reload 公共API测试",
      "if 公共API测试",
      "get 公共API测试",
      "if 公共API测试",
      "loadConfig 公共API测试",
      "for 公共API测试",
      "loadConfig 公共API测试",
      "clear 公共API测试",
      "clear 公共API测试",
      "clear 公共API测试",
      "for 公共API测试",
      "unwatch 公共API测试",
      "clear 公共API测试",
      "emit 公共API测试",
      "switch 公共API测试",
      "loadFromFile 公共API测试",
      "loadFromEnv 公共API测试",
      "loadFromRemote 公共API测试",
      "Error 公共API测试",
      "import 公共API测试",
      "if 公共API测试",
      "readFile 公共API测试",
      "parse 公共API测试",
      "if 公共API测试",
      "endsWith 公共API测试",
      "import 公共API测试",
      "readFile 公共API测试",
      "parse 公共API测试",
      "if 公共API测试",
      "endsWith 公共API测试",
      "if 公共API测试",
      "require 公共API测试",
      "Error 公共API测试",
      "Error 公共API测试",
      "catch 公共API测试",
      "Error 公共API测试",
      "for 公共API测试",
      "if 公共API测试",
      "slice 公共API测试",
      "toLowerCase 公共API测试",
      "parseEnvValue 公共API测试",
      "fetch 公共API测试",
      "if 公共API测试",
      "Error 公共API测试",
      "get 公共API测试",
      "if 公共API测试",
      "json 公共API测试",
      "if 公共API测试",
      "includes 公共API测试",
      "import 公共API测试",
      "text 公共API测试",
      "parse 公共API测试",
      "Error 公共API测试",
      "catch 公共API测试",
      "Error 公共API测试",
      "if 公共API测试",
      "parseInt 公共API测试",
      "if 公共API测试",
      "parseFloat 公共API测试",
      "if 公共API测试",
      "if 公共API测试",
      "if 公共API测试",
      "endsWith 公共API测试",
      "startsWith 公共API测试",
      "endsWith 公共API测试",
      "parse 公共API测试",
      "for 公共API测试",
      "if 公共API测试",
      "set 公共API测试",
      "ConfigManager 公共API测试",
      "ConfigManager 构造函数测试",
      "ConfigManager.constructor 初始化测试"
    ]
  }
}