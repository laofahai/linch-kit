/**
 * Generated by @linch-kit/schema
 * Do not edit this file manually
 * Generated at: 2025-07-18T15:10:16.496Z
 */

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id            String      @id @default(uuid())
  email         String      @unique
  name          String?
  image         String?
  status        String      @default("active")
  emailVerified DateTime?
  birthday      DateTime?
  tenantId      String?
  metadata      Json?       @default("{}")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  deletedAt     DateTime?
  lastLoginAt   DateTime?
  
  // 关联关系
  tenant        Tenant?     @relation(fields: [tenantId], references: [id])
  sessions      AuthSession[]
  userRoles     UserRole[]
  jwtBlacklist  JWTBlacklist[]
  auditLogs     AuditLog[]
  activities    UserActivity[]
  notifications UserNotification[]
  
  @@map("user")
}

// 认证会话模型
model AuthSession {
  id           String    @id @default(uuid())
  userId       String
  userEmail    String
  sessionId    String    @unique
  accessToken  String
  refreshToken String?
  tokenType    String    @default("Bearer")
  status       String    @default("active")
  issuedAt     DateTime  @default(now())
  expiresAt    DateTime
  lastAccessAt DateTime? @default(now())
  deviceInfo   Json?
  permissions  String[]  @default([])
  scopes       String[]  @default([])
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  revokedAt    DateTime?
  revokedBy    String?
  
  // 关联关系
  user         User      @relation(fields: [userId], references: [id])
  
  @@map("auth_session")
}

// 角色模型
model Role {
  id           String     @id @default(uuid())
  name         String     @unique
  description  String?
  permissions  String[]   @default([])
  isSystemRole Boolean    @default(false)
  tenantId     String?
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  
  // 关联关系
  tenant       Tenant?    @relation(fields: [tenantId], references: [id])
  userRoles    UserRole[]
  
  @@map("role")
}

// 用户角色关联
model UserRole {
  id        String    @id @default(uuid())
  userId    String
  roleId    String
  grantedAt DateTime  @default(now())
  grantedBy String?
  expiresAt DateTime?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  
  // 关联关系
  user      User      @relation(fields: [userId], references: [id])
  role      Role      @relation(fields: [roleId], references: [id])
  
  @@unique([userId, roleId])
  @@map("user_role")
}

// 租户模型
model Tenant {
  id          String    @id @default(uuid())
  name        String    @unique
  domain      String?   @unique
  slug        String    @unique
  description String?
  status      String    @default("active")
  plan        String    @default("free")
  maxUsers    Int       @default(10)
  settings    Json?     @default("{}")
  metadata    Json?     @default("{}")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime?
  
  // 关联关系
  users       User[]
  roles       Role[]
  auditLogs   AuditLog[]
  activities  UserActivity[]
  
  @@map("tenant")
}

// JWT黑名单模型
model JWTBlacklist {
  id            String    @id @default(uuid())
  jti           String    @unique
  userId        String?
  tokenHash     String
  expiresAt     DateTime
  revokedAt     DateTime  @default(now())
  revokedBy     String?
  revokedReason String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  // 关联关系
  user          User?     @relation(fields: [userId], references: [id])
  
  @@map("jwt_blacklist")
}

// 审计日志模型
model AuditLog {
  id          String    @id @default(uuid())
  action      String
  resource    String
  resourceId  String?
  status      String
  message     String?
  changes     Json?
  context     Json?     @default("{}")
  userId      String?
  tenantId    String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // 关联关系
  user        User?     @relation(fields: [userId], references: [id])
  tenant      Tenant?   @relation(fields: [tenantId], references: [id])
  
  @@map("audit_log")
}

// 用户活动模型
model UserActivity {
  id         String    @id @default(uuid())
  userId     String
  tenantId   String?
  type       String
  action     String
  resource   String?
  resourceId String?
  ipAddress  String?
  userAgent  String?
  metadata   Json?
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  
  // 关联关系
  user       User      @relation(fields: [userId], references: [id])
  tenant     Tenant?   @relation(fields: [tenantId], references: [id])
  
  @@map("user_activity")
}

// 用户通知模型
model UserNotification {
  id          String    @id @default(uuid())
  userId      String
  type        String
  title       String
  message     String
  actionUrl   String?
  actionLabel String?
  isRead      Boolean   @default(false)
  readAt      DateTime?
  metadata    Json?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  expiresAt   DateTime?
  
  // 关联关系
  user        User      @relation(fields: [userId], references: [id])
  
  @@map("user_notification")
}