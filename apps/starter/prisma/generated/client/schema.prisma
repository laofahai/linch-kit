/**
 * Generated by @linch-kit/schema
 * Do not edit this file manually
 * Generated at: 2025-07-18T15:00:50.596Z
 */

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String
  name          String?
  image         String?
  status        String?
  emailVerified DateTime?
  birthday      DateTime?
  tenantId      String?
  metadata      Json?
  deletedAt     DateTime?
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("user")
}

model AuthSession {
  id           String    @id @default(uuid())
  userId       String
  userEmail    String
  sessionId    String
  accessToken  String
  refreshToken String?
  tokenType    String?
  status       String?
  issuedAt     DateTime?
  expiresAt    DateTime
  lastAccessAt DateTime?
  deviceInfo   Json?
  permissions  Json?
  scopes       Json?
  revokedAt    DateTime?
  revokedBy    String?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  @@map("auth_session")
}

model Role {
  id           String   @id @default(uuid())
  name         String
  description  String?
  permissions  Json?
  isSystemRole Boolean?
  tenantId     String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("role")
}

model UserRole {
  id        String    @id @default(uuid())
  userId    String
  roleId    String
  grantedAt DateTime?
  grantedBy String?
  expiresAt DateTime?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("user_role")
}

model Tenant {
  id          String    @id @default(uuid())
  name        String
  domain      String?
  slug        String
  description String?
  status      String?
  plan        String?
  maxUsers    Float?
  settings    Json?
  metadata    Json?
  deletedAt   DateTime?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("tenant")
}

model JWTBlacklist {
  id            String    @id @default(uuid())
  jti           String
  userId        String?
  tokenHash     String
  expiresAt     DateTime
  revokedAt     DateTime?
  revokedBy     String?
  revokedReason String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("j_w_t_blacklist")
}
